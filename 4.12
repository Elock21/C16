1.
#include <iostream>
using namespace std;

struct nod{int nr, nd; nod*desc[20];}*rad, *aux, *aux2;
int nr_p=0, k=0, valoare, x=1;
void parcurgere_adancime(nod*nod_curent)
{
if(nod_curent!=NULL)
{
cout<<nod_curent->nr<<" ";
if(nod_curent->nr==valoare)
k=1;
if(nod_curent->nr%2==0) //d) numararea valorilor pare
nr_p++;
for(int i=0;i<nod_curent->nd;i++)
parcurgere_adancime(nod_curent->desc[i]);
}
}

int main()
{
int i;
//crearea radacinii
rad=new nod;
rad->nr=x;x++;
rad->nd=0;
for(i=0;i<10;i++)
rad->desc[i]=NULL;
//crearea celorlalte noduri
aux=new nod;
aux->nr=x;x++;
aux->nd=0;
for(i=0;i<10;i++)
aux->desc[i]=NULL;
rad->desc[0]=aux;
rad->nd++;
aux=new nod;
aux->nr=x;x++;
aux->nd=0;
for(i=0;i<10;i++)
aux->desc[i]=NULL;
rad->desc[1]=aux;
rad->nd++;
aux=new nod;
aux->nr=x;x++;
aux->nd=0;
for(i=0;i<10;i++)
aux->desc[i]=NULL;
rad->desc[0]->desc[0]=aux;
rad->desc[0]->nd++;
aux=new nod;
aux->nr=x;x++;
aux->nd=0;
for(i=0;i<10;i++)
aux->desc[i]=NULL;
rad->desc[0]->desc[1]=aux;
rad->desc[0]->nd++;
aux=new nod;
aux->nr=x;x++;
aux->nd=0;
for(i=0;i<10;i++)
aux->desc[i]=NULL;
rad->desc[0]->desc[2]=aux;
rad->desc[0]->nd++;

//a)stergerea unui nod terminal
aux=rad->desc[1];
aux2=aux->desc[1];
aux->desc[1]=NULL;
aux->nd--;
rad->desc[1]=aux2;
delete aux2;

//b)stergerea unui nod cu descendenti;
aux=rad->desc[0];
aux2=aux->desc[0];
aux2->desc[0]=aux->desc[1];
aux2->nd++;
aux2->desc[1]=aux->desc[2];
aux2->nd++;
rad->desc[0]=aux2;
delete aux;

//c)cautarea unei valori
cin>>valoare;
parcurgere_adancime(rad);
cout<<endl;
if(k==1)
cout<<"s-a gasit valoarea";
else
cout<<"nu s-a gasit valoarea";
cout<<endl<<"s-au gasit "<<nr_p<<" valori pare";
return 0;
}

2.
#include <iostream>
using namespace std;
struct nod{int nr; nod*st,*dr;}*rad, *aux, *aux2;
int k=0, valoare, x=1;
void RSD(nod*nod_curent)
{
if(nod_curent!=NULL)
{
cout<<nod_curent->nr<<" ";
RSD(nod_curent->st);
RSD(nod_curent->dr);
}
}
void parcurgere_adancime(nod*nod_curent)
{
if(nod_curent!=NULL)
{
cout<<nod_curent->nr<<" ";
if(nod_curent->nr==valoare)
k=1;
parcurgere_adancime(nod_curent->st);
parcurgere_adancime(nod_curent->dr);
}
}

int main()
{
//crearea radacinii
rad=new nod;
rad->nr=x;x++;
rad->st=NULL;
rad->dr=NULL;

//crearea celorlalte noduri
aux=new nod;
aux->nr=x;x++;
rad->st=aux;
aux->st=NULL;
aux->dr=NULL;

aux=new nod;
aux->nr=x;x++;
rad->dr=aux;
aux->st=NULL;
aux->dr=NULL;

aux=new nod;
aux->nr=x;x++;
rad->st->st=aux;
aux->st=NULL;
aux->dr=NULL;

aux=new nod;
aux->nr=x;x++;
rad->st->dr=aux;
aux->st=NULL;
aux->dr=NULL;

aux=new nod;
aux->nr=x;x++;
rad->dr->st=aux;
aux->st=NULL;
aux->dr=NULL;

aux=new nod;
aux->nr=x;x++;
rad->dr->st->st=aux;
aux->st=NULL;
aux->dr=NULL;

RSD(rad);cout<<endl;
//a)stergerea unui nod terminal
aux=rad->dr->st->st;
aux2=rad->dr->st;
aux2->st=NULL;
delete aux;

//b)stergerea unui nod cu 1 descendent
aux=rad->dr;
rad->dr=aux->st;
delete aux;

//c)stergerea unui nod cu 2 descendenti
aux=rad->st;
rad->st=aux->st;
aux->st->st=aux->dr;
delete aux;
RSD(rad);
cout<<endl;

//d)cautarea unei valori
cin>>valoare;
parcurgere_adancime(rad);
cout<<endl;
if(k==1)
cout<<"s-a gasit valoarea";
else
cout<<"nu s-a gasit valoarea";
return 0;
}
